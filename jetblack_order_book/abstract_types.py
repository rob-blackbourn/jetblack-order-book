"""Abstract Types"""

from __future__ import annotations

from abc import ABCMeta, abstractmethod
from decimal import Decimal
from typing import Callable, List, Optional, Sequence, Tuple

from .aggregate_order import AggregateOrder
from .aggregate_order_side import AggregateOrderSide
from .fill import Fill
from .order import Order, Side, Style


class AbstractOrderBook(metaclass=ABCMeta):
    """An abstract order book"""

    @property
    @abstractmethod
    def limit_bids(self) -> AggregateOrderSide:
        """The bids"""

    @property
    @abstractmethod
    def limit_offers(self) -> AggregateOrderSide:
        """The offers"""

    @property
    @abstractmethod
    def stop_bids(self) -> AggregateOrderSide:
        """The bids"""

    @property
    @abstractmethod
    def stop_offers(self) -> AggregateOrderSide:
        """The offers"""

    @abstractmethod
    def book_depth(
            self,
            levels: Optional[int]
    ) -> Tuple[Sequence[AggregateOrder], Sequence[AggregateOrder]]:
        """The best bids and offers.

        Args:
            levels (Optional[int]): An optional book depth.

        Returns:
            Tuple[Sequence[AggregateOrder], Sequence[AggregateOrder]]: The best
                bids and offers.
        """

    @abstractmethod
    def add_order(
            self,
            side: Side,
            price: Decimal,
            size: int,
            style: Style
    ) -> Tuple[Optional[int], List[Fill], List[int]]:
        """Add an order to the order book.

        If the order was invalid the returned order id will be None.

        Any fills generated by the new order will be returned, along with any
        orders that were cancelled.

        Args:
            side (Side): Buy or sell.
            price (Decimal): The price at which the order should be executed.
            size (int): The size of the order.

        Returns:
            Tuple[int, List[Fill], List[int]]: The order id, any fills that were
            generated, and any orders that were cancelled.
        """

    @abstractmethod
    def amend_order(self, order_id: int, size: int) -> None:
        """Amend the size of an order.

        The size must be greater than zero.

        Args:
            order_id (int): The order id.
            size (int): The new size of the order.

        Raises:
            ValueError: When the size is less than or equal to 0.
        """

    @abstractmethod
    def cancel_order(self, order_id: int) -> None:
        """Cancel an order.

        Args:
            order_id (int): The order id.

        Raises:
            ValueError: If the order cannot be found.
        """


class AbstractOrderBookManager(AbstractOrderBook):
    """An order book manager"""

    @abstractmethod
    def create(
            self,
            side: Side,
            price: Decimal,
            size: int,
            style: Style
    ) -> Tuple[Optional[Order], List[Order]]:
        """Create aa order.

        The new order is returned in the first part of the tuple. If the order
        was invalid None is returned for the order.

        The new order may generate cancellations, which are returned in the
        second part of the tuple.

        Args:
            side (Side): The side.
            price (Decimal): The price.
            size (int): The size.
            style (Style): The style.

        Returns:
            Tuple[Optional[Order], List[Order]]: An order or None
                if the order was invalid, and a list of cancelled orders
                generated by the new order.
        """

    @abstractmethod
    def find(self, order_id: int) -> Order:
        """Find an order by its id.

        Args:
            order_id (int): The order id.

        Returns:
            Order: The order for the order id.
        """

    @abstractmethod
    def delete(self, order: Order) -> None:
        """Delete an order.

        Args:
            order (Order): The order to delete.
        """


class AbstractOrderBookManagerPlugin(metaclass=ABCMeta):
    """An abstract plugin for order book managers"""

    def __init__(self, manager: AbstractOrderBookManager) -> None:
        self.manager = manager

    @property
    @abstractmethod
    def valid_styles(self) -> Sequence[Style]:
        """Return the order styles handled by the plugin.

        Returns:
            Sequence[Style]: A sequence of supported styles.
        """

    # pylint: disable=unused-argument
    def pre_create(self, side: Side, price: Decimal, style: Style) -> bool:
        """A hook called before order creation.

        If the method returns False creation is abandoned. For example if an
        immediate-or-cancel order was placed at a worse price the order will
        be immediately rejected.

        Args:
            side (Side): The side.
            price (Decimal): The price.
            style (Style): The style.

        Returns:
            bool: True if the create can continue; otherwise False.
        """
        return True

    def post_create(self, order: Order) -> List[Order]:
        """A hook called after create.

        If the hook returns orders, these orders will be cancelled, and creation
        will continue.

        Args:
            order (Order): The new order.

        Returns:
            List[int]: A list of order ids invalidated by the new order.
        """
        return []

    def post_delete(self, order: Order) -> None:
        """A hook called after delete.

        This hook can be used to clean up any locally cached data regarding the
        deleted order.

        Args:
            order (Order): The order to delete.
        """
        return

    def pre_fill(
            self,
            bids: AggregateOrderSide,
            offers: AggregateOrderSide,
            aggressor: Order
    ) -> List[Order]:
        """A hook called before filling an order.

        If the hook returns orders, these orders will be cancelled and the fill
        will be aborted.

        Args:
            bids (AggregateOrderSide): The bids to consider.
            offers (AggregateOrderSide): The offers to consider.
            aggressor (Order): The order that initiated the matching.

        Returns:
            List[Order]: A list of cancellable orders.
        """
        return []

    def post_match(self) -> List[Order]:
        """A hook called after a match.

        If this hook returns orders, these orders will be cancelled. This can
        be used to clean up orders which are no longer valid. For example any
        immediate-or-cancel orders that were not matched should be cancelled.

        Returns:
            List[Order]: A list of cancellable orders.
        """
        return []


PluginFactory = Callable[
    [AbstractOrderBookManager],
    AbstractOrderBookManagerPlugin
]
